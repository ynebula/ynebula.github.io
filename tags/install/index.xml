
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Install on Bigdata Engineer &amp; Analyst Story</title>
   <link>https://ynebula.github.io/tags/install/</link>
   <description>Recent content in Install on Bigdata Engineer &amp; Analyst Story</description>
   <generator>Hugo -- gohugo.io</generator>
   <copyright>Copyright &amp;copy; 2020 - Sungwoon Yoon</copyright>
   <lastBuildDate>Tue, 17 Nov 2020 12:28:58 +0900</lastBuildDate>
   
       <atom:link href="https://ynebula.github.io/tags/install/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Java8 설치</title>
       <link>https://ynebula.github.io/posts/java/java8_install_on_ubuntu/</link>
       <pubDate>Tue, 17 Nov 2020 12:28:58 +0900</pubDate>
       
       <guid>https://ynebula.github.io/posts/java/java8_install_on_ubuntu/</guid>
       <description>&lt;h3 id=&#34;설치-환경&#34;&gt;설치 환경&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Java 버전: 8&lt;/li&gt;
&lt;li&gt;운영체제: ubuntu-18.04.4-desktop-amd64&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;사전-작업&#34;&gt;사전 작업&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;패키지 새 번전 반영을 위해 레파지토리 최신화&lt;br&gt;
새 버전 확인: sudo apt-get update&lt;br&gt;
최신 버전으로 업그래이드: sudo apt-get upgrade&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;openjdk-설치&#34;&gt;OpenJDK 설치&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;sudo apt-get install openjdk-8-jdk&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;oracle-jdk-설치&#34;&gt;Oracle JDK 설치&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;사전 작업으로 rpm을 deb으로 변환하는 Alien를 설치합니다.
&lt;ul&gt;
&lt;li&gt;명령어: sudo apt-get install alien&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Oracle Java 라이센스 정책 변경에 따라, 오라클 사이트에 접속해 rpm을 다운 받아 설치를 진행합니다.
&lt;ul&gt;
&lt;li&gt;다운로드: &lt;a href=&#34;https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html&#34;&gt;Java SE 8 Archive Downloads (JDK 8u202 and earlier)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;rpm파일을 deb파일로 변환하여 설치합니다.
&lt;ul&gt;
&lt;li&gt;sudo alien -c jdk-8u202-linux-x64.rpm&lt;/li&gt;
&lt;li&gt;sudo dpkg -i jdk1.8_1.8.0202-1_amd64.deb&lt;/li&gt;
&lt;li&gt;sudo alien -i jdk-8u202-linux-x64.rpm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;java-버전-확인&#34;&gt;Java 버전 확인&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;java -version&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;사용하는-java-변경-명령어&#34;&gt;사용하는 Java 변경 명령어&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;사용하고자 하는 Java 버전이 아닐 경우 사용합니다.&lt;br&gt;
sudo update-alternatives &amp;ndash;set java /usr/lib/jvm/jdk1.8.0_version/bin/java&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;비고&#34;&gt;비고&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2019년 Oracle의 Java 라이센스 정책 변경으로 과거 apt-get을 사용해 설치하면 다음과 같은 에러 메시지 리턴 받고 설치가 안됩니다.&lt;/li&gt;
&lt;li&gt;명령어: sudo apt-get install oracle-java8-installer  
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;에러 메시지&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sudo apt-get install oracle-java8-installer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Error Message&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ynebula@ubuntu:~$ sudo apt-get install oracle-java8-installer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reading package lists&amp;hellip; Done&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Building dependency tree&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reading state information&amp;hellip; Done&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Package oracle-java8-installer is not available, but is referred to by another package.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;This may mean that the package is missing, has been obsoleted, or&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;is only available from another source&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E: Package &amp;lsquo;oracle-java8-installer&amp;rsquo; has no installation candidate&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
     </item>
   
     <item>
       <title>하둡(Hadoop) 가상 분산 모드 설치</title>
       <link>https://ynebula.github.io/posts/bigdata/distributed_mode_install/</link>
       <pubDate>Mon, 16 Nov 2020 11:39:12 +0900</pubDate>
       
       <guid>https://ynebula.github.io/posts/bigdata/distributed_mode_install/</guid>
       <description>&lt;h3 id=&#34;사전-작업&#34;&gt;사전 작업&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;레파지토리 최신화(패키지들의 새로운 버젼이 있는지 확인하고 최신 버전으로 업그래이드)&lt;/li&gt;
&lt;li&gt;sudo apt-get update&lt;/li&gt;
&lt;li&gt;sudo apt-get upgrade&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-설치&#34;&gt;Java 설치&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;&#34;&gt;Java 설치 참조 링크&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;mariadb&#34;&gt;MariaDB&lt;/h3&gt;
&lt;h4 id=&#34;mariadb-설치&#34;&gt;MariaDB 설치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;sudo apt-get install -y mariadb-server&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mysql-사용자-확인&#34;&gt;mysql 사용자 확인&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;cat /etc/passwd 를 수행해 mysql 유져를 확인합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mariadb-접속&#34;&gt;MariaDB 접속&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Unix Socket 방식으로 DB에 접속합니다.&lt;/li&gt;
&lt;li&gt;sudo mysql&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;기타&#34;&gt;기타&lt;/h4&gt;
&lt;h4 id=&#34;db-재시작-명령어&#34;&gt;DB 재시작 명령어&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;service mysql restart&lt;/li&gt;
&lt;li&gt;/etc/init.d/mysql restart&lt;/li&gt;
&lt;li&gt;mysql.server restart&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;utf8mb4-인코딩-확인&#34;&gt;utf8mb4 인코딩 확인&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;참고자료: &lt;a href=&#34;https://blog.lael.be/post/917&#34;&gt;utf8mb4 언어셋 소개 및 표현범위&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;show variables like &amp;lsquo;c%&#39;;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;서비스-확인&#34;&gt;서비스 확인&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;sudo service &amp;ndash;status-all |grep mysql&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;인증방법-unix-socket-방식으로-변경&#34;&gt;인증방법 Unix Socket 방식으로 변경&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;원문: &lt;a href=&#34;https://mariadb.org/authentication-in-mariadb-10-4/&#34;&gt;Authentication from MariaDB 10.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MariaDB 는 10.0 부터 인증 방식을 Unix Socket방식으로 변경했습니다. Unix Socket방식은 mysql 사용자와, 시스템 사용자를 일치시키는 방식입니다. 예전 인증방법은 두 root가 분리되어 있을 때는, mysql 사용자 root 를 명시하고 로그인 했습니다.
&lt;ul&gt;
&lt;li&gt;$ mysql -u root -p&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unix Socket 방식은 이렇다. sudo 로서 root 권한이 있다는 사실만 증명하면, mysql 에선 다른 인증을 하지 않습니다.
&lt;ul&gt;
&lt;li&gt;$ sudo mysql&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;만약, Unix Socket 을 사용하여, mysql 이라는 사용자로 mysql에 접근하려면 다음 명령어를 사용해야 합니다.
&lt;ul&gt;
&lt;li&gt;$ sudo -u mysql mysql -u mysql&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;하둡&#34;&gt;하둡&lt;/h3&gt;
&lt;p&gt;버전: 2.9.2&lt;/p&gt;
&lt;h4 id=&#34;사전작업&#34;&gt;사전작업&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;키젠 설정
&lt;ul&gt;
&lt;li&gt;hadoop 계정에 해줘야 함&lt;/li&gt;
&lt;li&gt;ssh-keygen -t rsa&lt;/li&gt;
&lt;li&gt;cat ~/.ssh/id_rsa.pub &amp;raquo; ~/.ssh/authorized_keys&lt;/li&gt;
&lt;li&gt;chmod 0660 ~/.ssh/authorized_keys&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SSH 서버 설치
&lt;ul&gt;
&lt;li&gt;sudo apt-get install openssh-server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;바이너리-파일-다운로드-및-설치&#34;&gt;바이너리 파일 다운로드 및 설치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hadoop.apache.org/releases.html&#34;&gt;하둡 다운로드 링크&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;위치변경: mv hadoop-2.9.2 /usr/local/hadoop-2.9.2&lt;/li&gt;
&lt;li&gt;소유권한 변경: sudo chown -R hadoop:hadoop hadoop-2.9.2/&lt;/li&gt;
&lt;li&gt;심볼링크: sudo ln -s /usr/local/hadoop-2.9.2 /usr/local/hadoop&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;bashrc-변경&#34;&gt;.bashrc 변경&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;JAVA_HOME=/usr/java/default&lt;/li&gt;
&lt;li&gt;HADOOP_HOME=/usr/local/hadoop&lt;/li&gt;
&lt;li&gt;PATH=$PATH:$HADOOP_HOME/bin&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hadoop-envsh-수정&#34;&gt;hadoop-env.sh 수정&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;export JAVA_HOME=/usr/java/default&lt;/li&gt;
&lt;li&gt;export HADOOP_PID_DIR=/usr/local/hadoop/pids&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;masters-slaves-수정&#34;&gt;masters, slaves 수정&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;네임노드 HA를 구성할 경우 스탠바이 네임노드가 보조네임노드의 기능을 대체한다. 하지만 가상 분산 모드로는 네임노드 HA를 구성할 수 없기 때문에 보조네임노드를 반드시 실행해야 한다. 또한 slaves 파일에는 데이터노드 호스트 목록을 설정해야 한다. 가상 분산 모드에서는 다음과 같이 설정한다. vi에디터로 masters 파일을 생성하고 localhost를 기입하고 저장합니다. slaves파일을 생성하고 데이터노드 호스트 목록을 기입하고 저장합니다.&lt;/li&gt;
&lt;li&gt;masters -&amp;gt; localhost&lt;/li&gt;
&lt;li&gt;slaves -&amp;gt; datanode01, datanode02&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;하둡2-수행&#34;&gt;하둡2 수행&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;네임노드를 초기화하고 모든 데몬을 수행합니다.
&lt;ul&gt;
&lt;li&gt;/usr/local/hadoop/bin/hdfs namenode -format&lt;/li&gt;
&lt;li&gt;/usr/local/hadoop/sbin/start-all.sh (deprecated 예정)&lt;/li&gt;
&lt;li&gt;/usr/local/hadoop/sbin/stop-all.sh (deprecated 예정)&lt;/li&gt;
&lt;li&gt;DFS 시작 /usr/local/hadoop/sbin/start-dfs.sh&lt;/li&gt;
&lt;li&gt;얀 시작 /usr/local/hadoop/sbin/start-yarn.sh&lt;/li&gt;
&lt;li&gt;맵리듀스 히스토리 서버 시작 /usr/local/hadoop/sbin/mr-jobhistory-daemon.sh start historyserver&lt;/li&gt;
&lt;li&gt;웹프록시 서버 시작 /usr/local/hadoop/sbin/yarn-daemon.sh start proxyserver&lt;/li&gt;
&lt;li&gt;DFS 종료 /usr/local/hadoop/sbin/stop-dfs.sh&lt;/li&gt;
&lt;li&gt;얀 종료 /usr/local/hadoop/sbin/stop-yarn.sh&lt;/li&gt;
&lt;li&gt;맵리듀스 히스토리 서버 종료 /usr/local/hadoop/sbin/mr-jobhistory-daemon.sh stop historyserver&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hdfsyarn-화면-접속&#34;&gt;HDFS/Yarn 화면 접속&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;http://127.0.0.1:50070&lt;/li&gt;
&lt;li&gt;http://127.0.0.1:8088&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;예제-실행&#34;&gt;예제 실행&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;HDFS에 파일을 저장하고 얀을 기반으로 맵리듀스 잡을 실행해 보겠습니다.
&lt;ul&gt;
&lt;li&gt;hadoop-env.sh를 HDFS에 저장&lt;/li&gt;
&lt;li&gt;./hdfs dfs -mkdir /user&lt;/li&gt;
&lt;li&gt;./hdfs dfs -mkdir /user/hadoop&lt;/li&gt;
&lt;li&gt;./hdfs dfs -mkdir /user/hadoop/conf&lt;/li&gt;
&lt;li&gt;./hdfs dfs -put /usr/local/hadoop/etc/hadoop/hadoop-env.sh /user/hadoop/conf/&lt;/li&gt;
&lt;li&gt;./hdfs dfs -ls /user/hadoop/conf/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WordCount 실행
&lt;ul&gt;
&lt;li&gt;./yarn jar /usr/local/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.9.2.jar wordcount /user/hadoop/conf /user/hadoop/output&lt;/li&gt;
&lt;li&gt;./hdfs dfs -cat /user/hadoop/output/part-r-00000&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;비고&#34;&gt;비고&lt;/h4&gt;
&lt;h4 id=&#34;에러1&#34;&gt;에러1&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;메시지 0.0.0.0: ssh: connect to host 0.0.0.0 port 22: Connection refused
localhost: ssh: connect to host localhost port 22: Connection refused&lt;/li&gt;
&lt;li&gt;원인 ssh 서버가 설치돼 있지 않아 발생함&lt;/li&gt;
&lt;li&gt;해결 openssh-server 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;에러2&#34;&gt;에러2&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;cat: /usr/local/hadoop/slaves: No such file or directory
cat: /usr/local/hadoop/slaves: No such file or directory
Starting secondary namenodes [0.0.0.0]
The authenticity of host &amp;lsquo;0.0.0.0 (0.0.0.0)&amp;rsquo; can&amp;rsquo;t be established.
ECDSA key fingerprint is SHA256:kXhOQgozNkCxUEeojqJ/4rb9Cx7lmU4yDuEgT2Aw5YQ.&lt;/li&gt;
&lt;li&gt;원인&lt;/li&gt;
&lt;li&gt;해결 rsa 키 생성&lt;/li&gt;
&lt;/ul&gt;
</description>
     </item>
   
     <item>
       <title>Hugo 설치(Install) &amp; 마크다운(Markdown)</title>
       <link>https://ynebula.github.io/posts/hugo/hugo-install-markdown/</link>
       <pubDate>Sat, 14 Nov 2020 12:30:39 +0900</pubDate>
       
       <guid>https://ynebula.github.io/posts/hugo/hugo-install-markdown/</guid>
       <description>&lt;h3 id=&#34;참고사이트&#34;&gt;참고사이트&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/getting-started/installing&#34;&gt;Install Hugo Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;Quick Start Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;설치-환경&#34;&gt;설치 환경&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windows 10, Github&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;github-설치&#34;&gt;Github 설치&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;Github Download Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;download--install&#34;&gt;Download &amp;amp; Install&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windows 환경 Hugo 설치는 Binary 파일을 다운로드 받고 시스템 환경 변수에 등록만 하면 됩니다. &lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;Hugo Download Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C:\Hugo\bin 디렉토리 생성 후 다운로드 받은 파일을 bin 디렉토리 안에 넣습니다.&lt;br&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/hugo/img/HugoInstall.png&#34; alt=&#34;alt text&#34; title=&#34;Hugo Binary File Location&#34;&gt;&lt;/li&gt;
&lt;li&gt;Hugo 바이너리를 시스템 환경 변수에 등록합니다.&lt;br&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/hugo/img/HugoEnvVarSetting.png&#34; alt=&#34;alt text&#34; title=&#34;Hugo Enviroment Variable Setting&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;create-a-new-site&#34;&gt;Create a New Site&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hugo 운영할 사이트를 생성합니다.&lt;/li&gt;
&lt;li&gt;명령어: hugo new site quickstart&lt;/li&gt;
&lt;li&gt;위 명령어를 수행하면 quickstart 디렉토리가 생성되고 다음 그림과 같이 생성됩니다.&lt;br&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/hugo/img/HugoNewSite.png&#34; alt=&#34;alt text&#34; title=&#34;Hugo New Site&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;add-a-theme--config&#34;&gt;Add a Theme $ Config&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo Theme&lt;/a&gt; 에서 마음에 드는 테마를 선택해 다음이 명령어를 수행합니다. 저는 심플한 디자인을 좋아해서 Kiera를 사용했습니다.&lt;/li&gt;
&lt;li&gt;git init&lt;/li&gt;
&lt;li&gt;git submodule add &lt;a href=&#34;https://github.com/funkydan2/hugo-kiera.git&#34;&gt;https://github.com/funkydan2/hugo-kiera.git&lt;/a&gt; themes/hugo-kiera
&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/hugo/img/HugoTheme.png&#34; alt=&#34;alt text&#34; title=&#34;Hugo Theme&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;config-setting&#34;&gt;Config Setting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;exampleSite 디렉토리에서 config.toml파일을 참고해서 수정하길 권장드리며, config 파일을 열어 운영 사이트에 맞게 수정합니다. 
&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/hugo/img/HugoSettingConfig.png&#34; alt=&#34;alt text&#34; title=&#34;Hugo Setting Config&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/hugo/img/HugoSettingConfig2.png&#34; alt=&#34;alt text&#34; title=&#34;Hugo Setting Config&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;add-some-content&#34;&gt;Add Some Content&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;다음 명령어를 수행하면 &amp;ldquo;content\posts\my-first-post.md&amp;rdquo; 파일이 생성됩니다. 파일을 열어 편집합니다.&lt;/li&gt;
&lt;li&gt;hugo new posts/my-first-post.md
&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/hugo/img/HugoFirstPosting.png&#34; alt=&#34;alt text&#34; title=&#34;Hugo First Posting&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;start-the-hugo-server&#34;&gt;Start the Hugo server&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hugo 서버를 시작하고 http://localhost:1313/ 로 접속합니다.&lt;/li&gt;
&lt;li&gt;hugo server -D
&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/hugo/img/HugoWebPage.png&#34; alt=&#34;alt text&#34; title=&#34;Hugo Web Page&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hugo-build--github-clone&#34;&gt;Hugo build &amp;amp; Github clone&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;hugo 빌드를 수행하면 public 디렉토리가 생성됩니다. 생성된 public 디렉토리에 접근해 git clone을 수행합니다(force로 수행해야 함).&lt;/li&gt;
&lt;li&gt;hugo -D
&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/hugo/img/HugoPublic.png&#34; alt=&#34;alt text&#34; title=&#34;Hugo Public Directory&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hugo-마크다운&#34;&gt;Hugo 마크다운&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hugo 마크다운 문법을 사용합니다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/content-management/formats/#learn-markdown&#34;&gt;Hugo Learn Markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
     </item>
   
     <item>
       <title>My First Post</title>
       <link>https://ynebula.github.io/posts/my-first-post/</link>
       <pubDate>Wed, 11 Nov 2020 12:35:31 +0900</pubDate>
       
       <guid>https://ynebula.github.io/posts/my-first-post/</guid>
       <description>&lt;p&gt;여기까지 Hugo를 이용한 웹 페이지 꾸미기를 실행하다가 투자되는 시간 대비 너무 다른 길로 새는 느낌이 들어 곧바로 글과 그림을 올리고 퍼블리슁할 수 있는 Gitbook에 글을 올리기 시작했다.
친숙한 UI와 편리한 기능 제공으로 나에게는 안성맞춤이지만 이게 문서에 특화된 플랫폼이라 그런지 게시글이 사이드바에  추가되어 영 블로그느낌이 아닌 매뉴얼 느낌이 나는게 문제다.
더군다나 글을 쓰고 완성하지 못한 채로 Merge를 하게 되면 미된 미완성된 글과 뒤죽박죽인 카테고리를 누가 볼 수도 있어 영 찜찜하다.&lt;/p&gt;
&lt;p&gt;여기까지 Hugo를 이용한 웹 페이지 꾸미기를 실행하다가 투자되는 시간 대비 너무 다른 길로 새는 느낌이 들어 곧바로 글과 그림을 올리고 퍼블리슁할 수 있는 Gitbook에 글을 올리기 시작했다.
친숙한 UI와 편리한 기능 제공으로 나에게는 안성맞춤이지만 이게 문서에 특화된 플랫폼이라 그런지 게시글이 사이드바에  추가되어 영 블로그느낌이 아닌 매뉴얼 느낌이 나는게 문제다.
더군다나 글을 쓰고 완성하지 못한 채로 Merge를 하게 되면 미된 미완성된 글과 뒤죽박죽인 카테고리를 누가 볼 수도 있어 영 찜찜하다.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>My First Post</title>
       <link>https://ynebula.github.io/posts/my-second-post/</link>
       <pubDate>Wed, 11 Nov 2020 12:35:31 +0900</pubDate>
       
       <guid>https://ynebula.github.io/posts/my-second-post/</guid>
       <description>&lt;p&gt;asasasaaa&lt;/p&gt;
</description>
     </item>
   
 </channel>
</rss>
