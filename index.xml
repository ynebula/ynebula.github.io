
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Bigdata Engineer &amp; Analyst Story</title>
   <link>https://ynebula.github.io/</link>
   <description>Recent content on Bigdata Engineer &amp; Analyst Story</description>
   <generator>Hugo -- gohugo.io</generator>
   <copyright>Copyright &amp;copy; 2020 - Sungwoon Yoon</copyright>
   <lastBuildDate>Sat, 26 Dec 2020 16:05:06 +0900</lastBuildDate>
   
       <atom:link href="https://ynebula.github.io/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>빅데이터 시스템이란</title>
       <link>https://ynebula.github.io/posts/bigdata/what_is_bigdata_system_/</link>
       <pubDate>Sat, 26 Dec 2020 16:05:06 +0900</pubDate>
       
       <guid>https://ynebula.github.io/posts/bigdata/what_is_bigdata_system_/</guid>
       <description>&lt;h3 id=&#34;빅데이터-시스템-개념&#34;&gt;빅데이터 시스템 개념&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/bigdata/img/what_is_bigdata_system_01.jpg&#34; alt=&#34;alt text&#34; title=&#34;Bigdata System&#34;&gt;&lt;br&gt;
빅데이터 시스템이란 단순히 파일 크기가 크다 파일을 처리한다는 의미가 아니다. 빅데이터 시스템이란 파일의 크기와 그 파일을 처리방식 모두 만족해야 한다.&lt;br&gt;
즉 데이터 저장에 필요한 &lt;strong&gt;HDFS&lt;/strong&gt; 와 같은 &lt;strong&gt;분산파일시스템&lt;/strong&gt; 과 이 데이터를 처리하는 &lt;strong&gt;MapReduce&lt;/strong&gt; 와 같은 &lt;strong&gt;분산병렬처리프레임워크&lt;/strong&gt; 를 가지고 있어야 빅데이터 처리 시스템이라고 할 수 있다.&lt;br&gt;
보통 수십 테라 이상의 크기의 테이터로 일반적인 DBMS로 처리하지 못하며, 서버 한 대로 처리할 수 없는 규모의 데이터를 말한다.&lt;br&gt;
대표적인 시스템으로는 하둡(Hadoop)이 있다.&lt;/p&gt;
&lt;h3 id=&#34;rdbms와-nosql의-비교-및-bigdata-필요성&#34;&gt;RDBMS와 NoSQL의 비교 및 Bigdata 필요성&lt;/h3&gt;
&lt;p&gt;보통 일반적인 DBMS는 빠른 읽기에 최적화(R&amp;raquo;CUD)되어있어 CUD가 일어나면 인덱스 수정해야 하는 작업이 있다. 이는 데이터가 빈번히 생성/주정/삭제되는 시스템에 적합하지 않다.&lt;br&gt;
반면 NoSQL은 빠른 쓰기에 최적화면 DB이다.&lt;br&gt;
데이터의 사이즈가 수십 테라로 커지면서 CRUD 모두 처리가 필요했으며 Bigdata 기술이 두각 되었다. 빅데이터는 테이블이나 스키마 방식이 아닌 일반적인 파일로 관리(주로 키/밸류 방식)한다.
빅데이터는 RDBMS나 NoSQL의 데이터 처리 방식(테이블/레코드)과 다르게 &lt;strong&gt;파일(Key/Value)&lt;/strong&gt; 로 처리합니다.&lt;/p&gt;
&lt;h3 id=&#34;빅데이터의-특징---3v&#34;&gt;빅데이터의 특징 - 3V&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Volume: 데이터 볼륨 증가&lt;/li&gt;
&lt;li&gt;Velocity: 데이터 생성의 속도가 빨라짐&lt;/li&gt;
&lt;li&gt;Variety: 정형화, 반정형 및 비정형 데이터&lt;br&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/bigdata/img/what_is_bigdata_system_02.jpg&#34; alt=&#34;alt text&#34; title=&#34;3V&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;빅데이터-처리-기술의-요구사항&#34;&gt;빅데이터 처리 기술의 요구사항&lt;/h3&gt;
&lt;p&gt;데이터 처리 방법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;배치 처리(Batch Processing): 데이터 일괄처리&lt;/li&gt;
&lt;li&gt;대화형 처리(Interactive Processing): 수 초 내에 답을 얻는 형태, Hive/Pig/Spark 대화형 모드&lt;/li&gt;
&lt;li&gt;실시간 처리(Real-time Processing): 실시간 분석, 큰 메모리, 인-메모리 처리 기술 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;결함 허용 시스템&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다른 노드에 결함 된 내용만 재 수행&lt;/li&gt;
&lt;li&gt;Multiple Region(물리적으로 다른 지역), Load Balancing(부하분산), Active/Standby, Data Mirroring(디스크 백업), Data Replication(데이터 백업)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;분산 처리/병렬 시스템(Yarn)&lt;/p&gt;
&lt;p&gt;분산 파일 시스템(HDFS)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터 복제 기술, Block Replication&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;스케일 아웃 방식의 확장성&lt;/p&gt;
&lt;p&gt;기존 시스템과 연계성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정형데이터를 처리했던 RDB와 연계, 즉 빅데이터 처리 요구사항은 빅데이터 시스템에서 처리하고 이 결과를 RDB로 넘겨서 서비스&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;빅데이터 수집, 저장, 처리, 분석, 시각화 도구 등 다양한 도구 지원 필요 및 호환성 필요&lt;br&gt;
대용량 데이터를 저 비용으로 처리&lt;/p&gt;
&lt;h3 id=&#34;빅데이터-프로세스-과정&#34;&gt;빅데이터 프로세스 과정&lt;/h3&gt;
&lt;p&gt;데이터 -&amp;gt; 수집 -&amp;gt; 저장 -&amp;gt; 처리 -&amp;gt; 분석 -&amp;gt; 표현&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터: 내부데이터(파일, 데이터베이스), 외부데이터(공공DB, 소셜미디어, IOT센서)&lt;/li&gt;
&lt;li&gt;수집: 정형(RDB, CSV), 반정형(HTML, XML, JSON, 웹로그), 비정형(이진파일, 이미지, 동영상, 텍스트)&lt;/li&gt;
&lt;li&gt;저장: 데이터베이스(RDBMS, NoSQL DB)&lt;/li&gt;
&lt;li&gt;처리: 배치, 실시간, 분산 병렬&lt;/li&gt;
&lt;li&gt;분석: 통계, 데이터 마이닝, 텍스트 마이닝, 머신러닝&lt;/li&gt;
&lt;li&gt;표현: 시간, 분포 관계, 비교, 공간&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bigdata-처리-방식&#34;&gt;Bigdata 처리 방식&lt;/h3&gt;
&lt;p&gt;서버의 수를 병렬로 추가하는 Scale out 방식으로 처리하고 하둡v2의 경우 10,000대까지 연결 가능하다. 처리 가능한 데이터 량 수십 PB까지 보통 DBMS는 수 테라바이트 정도의 크기까지 다룰 수 있다.&lt;/p&gt;
&lt;p&gt;배치 처리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주기적 작업을 일괄적으로 수행하는 형식으로 답변을 얻기까지 일정 시간이 소요되는 처리 방식&lt;/li&gt;
&lt;li&gt;대표적인 툴: 맵리듀스, 하이브, 피그&lt;/li&gt;
&lt;li&gt;ETL(Extract, Transform, Load) -&amp;gt; 로드된 데이터를 분석&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;대화형 처리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;원하는 질의 대해 수 초 내에 답을 얻는 형태&lt;/li&gt;
&lt;li&gt;사용자와 시스템 간의 유져 인터페이스 또는 커맨드라인 인터페이스 필요&lt;/li&gt;
&lt;li&gt;대표적인 툴: 하이브, 피그, 스파크&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;실시간 처리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;수 초 미만 또는 1초 미만의 실시간 처리 및 이벤트성 응답으로 데이터가 수집되는 즉시 실시간 전처리, 실시간 계산, 실시간 패턴 분석을 처리&lt;/li&gt;
&lt;li&gt;데이터 스트림 처리&lt;/li&gt;
&lt;li&gt;대표적인 툴: 스톰(Storm), 스파크 스트리밍(Spark Streaming) - 인메모리 구조&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;분산-데이터의-문제점-및-해결-방법&#34;&gt;분산 데이터의 문제점 및 해결 방법&lt;/h3&gt;
&lt;p&gt;문제점: 통상 데이터를 분산하면 여러 개의 시스템 중 어디에 파일의 위치와 일부 시스템/네트워크에 장애의 대한 문제점을 갖고 있다.&lt;/p&gt;
&lt;p&gt;해결책: 분산파일시스템&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;고가용성: 동일한 정보를 여러 군데 중복으로 저장해서 일부 데이터 유실 및 서버 장애에 대한 문제점을 해결할 수 있다(중복서/다중화(Redundancy)).&lt;/li&gt;
&lt;li&gt;병렬처리방식: 작업을 나눠 동시에 처리하는 방식으로 처리 속도를 높일 수 있습니다(작업의 분업화).&lt;/li&gt;
&lt;/ul&gt;
</description>
     </item>
   
     <item>
       <title>Zookeeper 설치</title>
       <link>https://ynebula.github.io/posts/zookeeper/zookeeper_install_ubuntu/</link>
       <pubDate>Sun, 22 Nov 2020 14:23:34 +0900</pubDate>
       
       <guid>https://ynebula.github.io/posts/zookeeper/zookeeper_install_ubuntu/</guid>
       <description>&lt;h3 id=&#34;설치-환경&#34;&gt;설치 환경&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Zookeeper 버전: zookeeper-3.5.8&lt;/li&gt;
&lt;li&gt;운영체제: ubuntu-18.04.4-desktop-amd64&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;사전-작업&#34;&gt;사전 작업&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;레파지토리 최신화&lt;/li&gt;
&lt;li&gt;sudo apt-get update&lt;/li&gt;
&lt;li&gt;sudo apt-get upgrade&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-설치&#34;&gt;Java 설치&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://ynebula.github.io/posts/java/java8_install_on_ubuntu/&#34;&gt;Java 설치 참조 링크&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;adduser zookeeper&lt;/p&gt;
&lt;h3 id=&#34;zookeeper-다운로드&#34;&gt;Zookeeper 다운로드&lt;/h3&gt;
&lt;p&gt;Download: &lt;a href=&#34;http://apache.tt.co.kr/zookeeper/stable/&#34;&gt;http://apache.tt.co.kr/zookeeper/stable/&lt;/a&gt;
wget &lt;a href=&#34;http://apache.tt.co.kr/zookeeper/stable/apache-zookeeper-3.5.8-bin.tar.gz&#34;&gt;http://apache.tt.co.kr/zookeeper/stable/apache-zookeeper-3.5.8-bin.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;sudo mv apache-zookeeper-3.5.8-bin /usr/local/
sudo chown -R zookeeper:zookeeper apache-zookeeper-3.5.8-bin/
sudo ln -s apache-zookeeper-3.5.8-bin/ zookeeper&lt;/p&gt;
&lt;h3 id=&#34;환결-설정&#34;&gt;환결 설정&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;zookeeper 유져의 .profile에 home 디렉토리를 설정합니다.&lt;/li&gt;
&lt;li&gt;ZOOKEEPER_HOME=/usr/local/zookeeper&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;로그-디렉토리-생성&#34;&gt;로그 디렉토리 생성&lt;/h3&gt;
&lt;p&gt;지노드의 복사본인 스냅샷과 트랜잭션 로그들이 저장됩니다.
지노드에 변경사항이 발생하면, 이 변경사항은 트랜잭션 로그에 추가됩니다.
그리고 로그가 어느정도 커지면, 현재 모든 지노드의 상태 스냅샷이 파일시스템에 저장됩니다.
앙상블 내 주키퍼 노드를 구분하기 위해서 ID를 만듭니다. 주키퍼에서는 myid라고 부르며 정수 형태로 만들어주면 됩니다.
방금 만든 /data 디렉토리 하단에 myid라는 파일을 만들고 내용은 1이라고 입력합니다.
여기서 myid는 주키퍼의 설정 파일에서 사용하게 되며, 예제 2-2의 zoo.cfg파일을 다루면서 다시 설명하겠습니다.
다른 주키퍼 서버들에도 myid 파일을 만들고 숫자를 입력합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sudo mkdir /var/log/zookeeper&lt;/li&gt;
&lt;li&gt;sudo chown zookeeper:zookeeper /var/log/zookeeper&lt;/li&gt;
&lt;li&gt;sudo su zookeeper&lt;/li&gt;
&lt;li&gt;echo 1 &amp;gt; /var/log/zookeeper/myid&lt;/li&gt;
&lt;li&gt;echo 2 &amp;gt; /var/log/zookeeper/myid&lt;/li&gt;
&lt;li&gt;echo 3 &amp;gt; /var/log/zookeeper/myid&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;zoo-설정파일-조정&#34;&gt;zoo 설정파일 조정&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;cp zoo_sample.cfg zoo.cfg 
75  vi zoo.cfg
&lt;h1 id=&#34;clustered-multi-server-setup&#34;&gt;Clustered (Multi-Server) Setup&lt;/h1&gt;
&lt;h1 id=&#34;ref-httpszookeeperapacheorgdoccurrentzookeeperadminhtmlsc_singleanddevsetup&#34;&gt;Ref: &lt;a href=&#34;https://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_singleAndDevSetup&#34;&gt;https://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_singleAndDevSetup&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;server.1=zk1:2888:3888
#server.2=zk2:2888:3888
#server.3=zk3:2888:3888&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;tickTime=2000
initLimit=10
syncLimit=5
clientPort=2181
dataDir=/var/log/zookeeper
server.1=zk1:2888:3888
server.2=zk2:2888:3888
#server.3=zk3:2888:3888&lt;/p&gt;
&lt;p&gt;tickTime: 주키퍼가 사용하는 시간에 대한 기본 측정 단위(밀리초)
initLimit: 팔로워가 리더와 초기에 연결하는 시간에 대한 타임아웃 tick의 수
syncLimit: 팔로워가 리더와 동기화 하는 시간에 대한 타임 아웃 tick의 수(주키퍼에 저장된 데이터가 크면 수를 늘려야 함)
dataDir= 주키퍼의 트랜잭션 로그와 스냅샷이 저장되는 데이터 저장 경로
clientPort: 주키퍼 사용 TCP포트
server.x: 주키퍼 앙상블 구성을 위한 서버 설절이며, server.myid 형식으로 사용함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;myid와 호스트 이름 또는 ID주소:포트번호&lt;/li&gt;
&lt;li&gt;포트번호 2888, 3888은 기본 포트이며 앙상블 내 노드끼리 연결하는데 사용하고, 리더 선출에 사용함&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;zoo-실행&#34;&gt;zoo 실행&lt;/h3&gt;
&lt;p&gt;/usr/local/zookeeper/bin/zkServer.sh start&lt;/p&gt;
&lt;p&gt;ps -edf |grep zookeeper&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Java8 설치</title>
       <link>https://ynebula.github.io/posts/java/java8_install_on_ubuntu/</link>
       <pubDate>Tue, 17 Nov 2020 12:28:58 +0900</pubDate>
       
       <guid>https://ynebula.github.io/posts/java/java8_install_on_ubuntu/</guid>
       <description>&lt;h3 id=&#34;설치-환경&#34;&gt;설치 환경&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Java 버전: 8&lt;/li&gt;
&lt;li&gt;운영체제: ubuntu-18.04.4-desktop-amd64&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;사전-작업&#34;&gt;사전 작업&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;패키지 새 번전 반영을 위해 레파지토리 최신화&lt;br&gt;
새 버전 확인: sudo apt-get update&lt;br&gt;
최신 버전으로 업그래이드: sudo apt-get upgrade&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;openjdk-설치&#34;&gt;OpenJDK 설치&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;sudo apt-get install openjdk-8-jdk&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;oracle-jdk-설치&#34;&gt;Oracle JDK 설치&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;사전 작업으로 rpm을 deb으로 변환하는 Alien를 설치합니다.
&lt;ul&gt;
&lt;li&gt;명령어: sudo apt-get install alien&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Oracle Java 라이센스 정책 변경에 따라, 오라클 사이트에 접속해 rpm을 다운 받아 설치를 진행합니다.
&lt;ul&gt;
&lt;li&gt;다운로드: &lt;a href=&#34;https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html&#34;&gt;Java SE 8 Archive Downloads (JDK 8u202 and earlier)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;rpm파일을 deb파일로 변환하여 설치합니다.
&lt;ul&gt;
&lt;li&gt;sudo alien -c jdk-8u202-linux-x64.rpm&lt;/li&gt;
&lt;li&gt;sudo dpkg -i jdk1.8_1.8.0202-1_amd64.deb&lt;/li&gt;
&lt;li&gt;sudo alien -i jdk-8u202-linux-x64.rpm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;java-버전-확인&#34;&gt;Java 버전 확인&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;java -version&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;사용하는-java-변경-명령어&#34;&gt;사용하는 Java 변경 명령어&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;사용하고자 하는 Java 버전이 아닐 경우 사용합니다.&lt;br&gt;
sudo update-alternatives &amp;ndash;set java /usr/lib/jvm/jdk1.8.0_version/bin/java&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;비고&#34;&gt;비고&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2019년 Oracle의 Java 라이센스 정책 변경으로 과거 apt-get을 사용해 설치하면 다음과 같은 에러 메시지 리턴 받고 설치가 안됩니다.&lt;/li&gt;
&lt;li&gt;명령어: sudo apt-get install oracle-java8-installer  
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;에러 메시지&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sudo apt-get install oracle-java8-installer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Error Message&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ynebula@ubuntu:~$ sudo apt-get install oracle-java8-installer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reading package lists&amp;hellip; Done&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Building dependency tree&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reading state information&amp;hellip; Done&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Package oracle-java8-installer is not available, but is referred to by another package.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;This may mean that the package is missing, has been obsoleted, or&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;is only available from another source&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E: Package &amp;lsquo;oracle-java8-installer&amp;rsquo; has no installation candidate&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
     </item>
   
     <item>
       <title>하둡(Hadoop) 가상 분산 모드 설치</title>
       <link>https://ynebula.github.io/posts/bigdata/distributed_mode_install/</link>
       <pubDate>Mon, 16 Nov 2020 11:39:12 +0900</pubDate>
       
       <guid>https://ynebula.github.io/posts/bigdata/distributed_mode_install/</guid>
       <description>&lt;h3 id=&#34;사전-작업&#34;&gt;사전 작업&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;레파지토리 최신화(패키지들의 새로운 버젼이 있는지 확인하고 최신 버전으로 업그래이드)&lt;/li&gt;
&lt;li&gt;sudo apt-get update&lt;/li&gt;
&lt;li&gt;sudo apt-get upgrade&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-설치&#34;&gt;Java 설치&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://ynebula.github.io/posts/java/java8_install_on_ubuntu/&#34;&gt;Java 설치 참조 링크&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;mariadb&#34;&gt;MariaDB&lt;/h3&gt;
&lt;h4 id=&#34;mariadb-설치&#34;&gt;MariaDB 설치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;sudo apt-get install -y mariadb-server&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mysql-사용자-확인&#34;&gt;mysql 사용자 확인&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;cat /etc/passwd 를 수행해 mysql 유져를 확인합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mariadb-접속&#34;&gt;MariaDB 접속&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Unix Socket 방식으로 DB에 접속합니다.&lt;/li&gt;
&lt;li&gt;sudo mysql&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;기타&#34;&gt;기타&lt;/h4&gt;
&lt;h4 id=&#34;db-재시작-명령어&#34;&gt;DB 재시작 명령어&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;service mysql restart&lt;/li&gt;
&lt;li&gt;/etc/init.d/mysql restart&lt;/li&gt;
&lt;li&gt;mysql.server restart&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;utf8mb4-인코딩-확인&#34;&gt;utf8mb4 인코딩 확인&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;참고자료: &lt;a href=&#34;https://blog.lael.be/post/917&#34;&gt;utf8mb4 언어셋 소개 및 표현범위&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;show variables like &amp;lsquo;c%&#39;;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;서비스-확인&#34;&gt;서비스 확인&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;sudo service &amp;ndash;status-all |grep mysql&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;인증방법-unix-socket-방식으로-변경&#34;&gt;인증방법 Unix Socket 방식으로 변경&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;원문: &lt;a href=&#34;https://mariadb.org/authentication-in-mariadb-10-4/&#34;&gt;Authentication from MariaDB 10.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MariaDB 는 10.0 부터 인증 방식을 Unix Socket방식으로 변경했습니다. Unix Socket방식은 mysql 사용자와, 시스템 사용자를 일치시키는 방식입니다. 예전 인증방법은 두 root가 분리되어 있을 때는, mysql 사용자 root 를 명시하고 로그인 했습니다.
&lt;ul&gt;
&lt;li&gt;$ mysql -u root -p&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unix Socket 방식은 이렇다. sudo 로서 root 권한이 있다는 사실만 증명하면, mysql 에선 다른 인증을 하지 않습니다.
&lt;ul&gt;
&lt;li&gt;$ sudo mysql&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;만약, Unix Socket 을 사용하여, mysql 이라는 사용자로 mysql에 접근하려면 다음 명령어를 사용해야 합니다.
&lt;ul&gt;
&lt;li&gt;$ sudo -u mysql mysql -u mysql&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;하둡&#34;&gt;하둡&lt;/h3&gt;
&lt;p&gt;버전: 2.9.2&lt;/p&gt;
&lt;h4 id=&#34;사전작업&#34;&gt;사전작업&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;키젠 설정
&lt;ul&gt;
&lt;li&gt;hadoop 계정에 해줘야 함&lt;/li&gt;
&lt;li&gt;ssh-keygen -t rsa&lt;/li&gt;
&lt;li&gt;cat ~/.ssh/id_rsa.pub &amp;raquo; ~/.ssh/authorized_keys&lt;/li&gt;
&lt;li&gt;chmod 0660 ~/.ssh/authorized_keys&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SSH 서버 설치
&lt;ul&gt;
&lt;li&gt;sudo apt-get install openssh-server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;바이너리-파일-다운로드-및-설치&#34;&gt;바이너리 파일 다운로드 및 설치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hadoop.apache.org/releases.html&#34;&gt;하둡 다운로드 링크&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;위치변경: mv hadoop-2.9.2 /usr/local/hadoop-2.9.2&lt;/li&gt;
&lt;li&gt;소유권한 변경: sudo chown -R hadoop:hadoop hadoop-2.9.2/&lt;/li&gt;
&lt;li&gt;심볼링크: sudo ln -s /usr/local/hadoop-2.9.2 /usr/local/hadoop&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;bashrc-변경&#34;&gt;.bashrc 변경&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;JAVA_HOME=/usr/java/default&lt;/li&gt;
&lt;li&gt;HADOOP_HOME=/usr/local/hadoop&lt;/li&gt;
&lt;li&gt;PATH=$PATH:$HADOOP_HOME/bin&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hadoop-envsh-수정&#34;&gt;hadoop-env.sh 수정&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;export JAVA_HOME=/usr/java/default&lt;/li&gt;
&lt;li&gt;export HADOOP_PID_DIR=/usr/local/hadoop/pids&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;masters-slaves-수정&#34;&gt;masters, slaves 수정&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;네임노드 HA를 구성할 경우 스탠바이 네임노드가 보조네임노드의 기능을 대체한다. 하지만 가상 분산 모드로는 네임노드 HA를 구성할 수 없기 때문에 보조네임노드를 반드시 실행해야 한다. 또한 slaves 파일에는 데이터노드 호스트 목록을 설정해야 한다. 가상 분산 모드에서는 다음과 같이 설정한다. vi에디터로 masters 파일을 생성하고 localhost를 기입하고 저장합니다. slaves파일을 생성하고 데이터노드 호스트 목록을 기입하고 저장합니다.&lt;/li&gt;
&lt;li&gt;masters -&amp;gt; localhost&lt;/li&gt;
&lt;li&gt;slaves -&amp;gt; datanode01, datanode02&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;하둡2-수행&#34;&gt;하둡2 수행&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;네임노드를 초기화하고 모든 데몬을 수행합니다.
&lt;ul&gt;
&lt;li&gt;/usr/local/hadoop/bin/hdfs namenode -format&lt;/li&gt;
&lt;li&gt;/usr/local/hadoop/sbin/start-all.sh (deprecated 예정)&lt;/li&gt;
&lt;li&gt;/usr/local/hadoop/sbin/stop-all.sh (deprecated 예정)&lt;/li&gt;
&lt;li&gt;DFS 시작 /usr/local/hadoop/sbin/start-dfs.sh&lt;/li&gt;
&lt;li&gt;얀 시작 /usr/local/hadoop/sbin/start-yarn.sh&lt;/li&gt;
&lt;li&gt;맵리듀스 히스토리 서버 시작 /usr/local/hadoop/sbin/mr-jobhistory-daemon.sh start historyserver&lt;/li&gt;
&lt;li&gt;웹프록시 서버 시작 /usr/local/hadoop/sbin/yarn-daemon.sh start proxyserver&lt;/li&gt;
&lt;li&gt;DFS 종료 /usr/local/hadoop/sbin/stop-dfs.sh&lt;/li&gt;
&lt;li&gt;얀 종료 /usr/local/hadoop/sbin/stop-yarn.sh&lt;/li&gt;
&lt;li&gt;맵리듀스 히스토리 서버 종료 /usr/local/hadoop/sbin/mr-jobhistory-daemon.sh stop historyserver&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hdfsyarn-화면-접속&#34;&gt;HDFS/Yarn 화면 접속&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;http://127.0.0.1:50070&lt;/li&gt;
&lt;li&gt;http://127.0.0.1:8088&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;예제-실행&#34;&gt;예제 실행&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;HDFS에 파일을 저장하고 얀을 기반으로 맵리듀스 잡을 실행해 보겠습니다.
&lt;ul&gt;
&lt;li&gt;hadoop-env.sh를 HDFS에 저장&lt;/li&gt;
&lt;li&gt;./hdfs dfs -mkdir /user&lt;/li&gt;
&lt;li&gt;./hdfs dfs -mkdir /user/hadoop&lt;/li&gt;
&lt;li&gt;./hdfs dfs -mkdir /user/hadoop/conf&lt;/li&gt;
&lt;li&gt;./hdfs dfs -put /usr/local/hadoop/etc/hadoop/hadoop-env.sh /user/hadoop/conf/&lt;/li&gt;
&lt;li&gt;./hdfs dfs -ls /user/hadoop/conf/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WordCount 실행
&lt;ul&gt;
&lt;li&gt;./yarn jar /usr/local/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.9.2.jar wordcount /user/hadoop/conf /user/hadoop/output&lt;/li&gt;
&lt;li&gt;./hdfs dfs -cat /user/hadoop/output/part-r-00000&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;비고&#34;&gt;비고&lt;/h4&gt;
&lt;h4 id=&#34;에러1&#34;&gt;에러1&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;메시지 0.0.0.0: ssh: connect to host 0.0.0.0 port 22: Connection refused
localhost: ssh: connect to host localhost port 22: Connection refused&lt;/li&gt;
&lt;li&gt;원인 ssh 서버가 설치돼 있지 않아 발생함&lt;/li&gt;
&lt;li&gt;해결 openssh-server 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;에러2&#34;&gt;에러2&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;cat: /usr/local/hadoop/slaves: No such file or directory
cat: /usr/local/hadoop/slaves: No such file or directory
Starting secondary namenodes [0.0.0.0]
The authenticity of host &amp;lsquo;0.0.0.0 (0.0.0.0)&amp;rsquo; can&amp;rsquo;t be established.
ECDSA key fingerprint is SHA256:kXhOQgozNkCxUEeojqJ/4rb9Cx7lmU4yDuEgT2Aw5YQ.&lt;/li&gt;
&lt;li&gt;원인&lt;/li&gt;
&lt;li&gt;해결 rsa 키 생성&lt;/li&gt;
&lt;/ul&gt;
</description>
     </item>
   
     <item>
       <title>Hugo 설치(Install) &amp; 마크다운(Markdown)</title>
       <link>https://ynebula.github.io/posts/hugo/hugo-install-markdown/</link>
       <pubDate>Sat, 14 Nov 2020 12:30:39 +0900</pubDate>
       
       <guid>https://ynebula.github.io/posts/hugo/hugo-install-markdown/</guid>
       <description>&lt;h3 id=&#34;참고사이트&#34;&gt;참고사이트&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/getting-started/installing&#34;&gt;Install Hugo Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;Quick Start Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;설치-환경&#34;&gt;설치 환경&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windows 10, Github&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;github-설치&#34;&gt;Github 설치&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;Github Download Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;download--install&#34;&gt;Download &amp;amp; Install&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windows 환경 Hugo 설치는 Binary 파일을 다운로드 받고 시스템 환경 변수에 등록만 하면 됩니다. &lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;Hugo Download Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C:\Hugo\bin 디렉토리 생성 후 다운로드 받은 파일을 bin 디렉토리 안에 넣습니다.&lt;br&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/hugo/img/HugoInstall.png&#34; alt=&#34;alt text&#34; title=&#34;Hugo Binary File Location&#34;&gt;&lt;/li&gt;
&lt;li&gt;Hugo 바이너리를 시스템 환경 변수에 등록합니다.&lt;br&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/hugo/img/HugoEnvVarSetting.png&#34; alt=&#34;alt text&#34; title=&#34;Hugo Enviroment Variable Setting&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;create-a-new-site&#34;&gt;Create a New Site&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hugo 운영할 사이트를 생성합니다.&lt;/li&gt;
&lt;li&gt;명령어: hugo new site quickstart&lt;/li&gt;
&lt;li&gt;위 명령어를 수행하면 quickstart 디렉토리가 생성되고 다음 그림과 같이 생성됩니다.&lt;br&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/hugo/img/HugoNewSite.png&#34; alt=&#34;alt text&#34; title=&#34;Hugo New Site&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;add-a-theme--config&#34;&gt;Add a Theme $ Config&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo Theme&lt;/a&gt; 에서 마음에 드는 테마를 선택해 다음이 명령어를 수행합니다. 저는 심플한 디자인을 좋아해서 Kiera를 사용했습니다.&lt;/li&gt;
&lt;li&gt;git init&lt;/li&gt;
&lt;li&gt;git submodule add &lt;a href=&#34;https://github.com/funkydan2/hugo-kiera.git&#34;&gt;https://github.com/funkydan2/hugo-kiera.git&lt;/a&gt; themes/hugo-kiera
&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/hugo/img/HugoTheme.png&#34; alt=&#34;alt text&#34; title=&#34;Hugo Theme&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;config-setting&#34;&gt;Config Setting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;exampleSite 디렉토리에서 config.toml파일을 참고해서 수정하길 권장드리며, config 파일을 열어 운영 사이트에 맞게 수정합니다. 
&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/hugo/img/HugoSettingConfig.png&#34; alt=&#34;alt text&#34; title=&#34;Hugo Setting Config&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/hugo/img/HugoSettingConfig2.png&#34; alt=&#34;alt text&#34; title=&#34;Hugo Setting Config&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;add-some-content&#34;&gt;Add Some Content&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;다음 명령어를 수행하면 &amp;ldquo;content\posts\my-first-post.md&amp;rdquo; 파일이 생성됩니다. 파일을 열어 편집합니다.&lt;/li&gt;
&lt;li&gt;hugo new posts/my-first-post.md
&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/hugo/img/HugoFirstPosting.png&#34; alt=&#34;alt text&#34; title=&#34;Hugo First Posting&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;start-the-hugo-server&#34;&gt;Start the Hugo server&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hugo 서버를 시작하고 http://localhost:1313/ 로 접속합니다.&lt;/li&gt;
&lt;li&gt;hugo server -D
&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/hugo/img/HugoWebPage.png&#34; alt=&#34;alt text&#34; title=&#34;Hugo Web Page&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hugo-build--github-clone&#34;&gt;Hugo build &amp;amp; Github clone&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;hugo 빌드를 수행하면 public 디렉토리가 생성됩니다. 생성된 public 디렉토리에 접근해 git clone을 수행합니다(force로 수행해야 함).&lt;/li&gt;
&lt;li&gt;hugo -D
&lt;img src=&#34;https://raw.githubusercontent.com/ynebula/ynebula.github.io/main/posts/hugo/img/HugoPublic.png&#34; alt=&#34;alt text&#34; title=&#34;Hugo Public Directory&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hugo-마크다운&#34;&gt;Hugo 마크다운&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hugo 마크다운 문법을 사용합니다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/content-management/formats/#learn-markdown&#34;&gt;Hugo Learn Markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
     </item>
   
 </channel>
</rss>
